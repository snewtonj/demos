#!/usr/bin/ruby

require 'rubygems'
require 'cgi'
require 'date'
require 'json'
require 'net/https'
require 'openid/version'
require 'openid/consumer'
require 'openid/extensions/sreg'
require 'openid/extensions/pape'
require 'openid/store/filesystem'
require 'syslog'

#$SAFE=1

def respond(cgi, title)
  table = "<table><tr><th>Key</th><th>Value</th></tr>"
  cgi.params.each { |k, v|
    values = v.join(", ")
    table << "<tr><td>#{k}</td><td>#{values}</td></tr>"
  }
  table << "</table>"
  cgi.out {
    cgi.html {
      now = DateTime.now
      "<head><title>#{title}!</title></head><body><h1>#{title}!</h1><p>#{now}</p>#{table}</body>"
    }
}

end
syslog = Syslog.open("rubyopenfinish", Syslog::LOG_PID, Syslog::LOG_USER)
  
c = CGI.new("html4")

begin 
  store = OpenID::Store::Filesystem.new('/tmp')
  session = { }
  consumer = OpenID::Consumer.new(session, store)
  
params = {}
c.params.each {|k,v| params[k] = v.join(',') }
syslog.info(params.to_s)
oidresp = consumer.complete(params, 'http://localhost/cgi-bin/openidfinish')

status = oidresp.status

syslog.info("openid response status: #{status}")


case status
  when OpenID::Consumer::FAILURE
    respond(c, "Error: " + oidresp.message)
  when OpenID::Consumer::CANCEL
    respond(c, "Cancelled")
  when OpenID::Consumer::SETUP_NEEDED
    respond(c, "Setup Needed")
  when OpenID::Consumer::SUCCESS
    sreg_resp = OpenID::SReg::Response.from_success_response(oidresp)
    displayName = 'Unknown'
    profile = {}
    if !sreg_resp.empty?
        displayName = sreg_resp.data['fullname']
        profile = { 'profile' => sreg_resp.data }
        syslog.info(JSON.generate(profile))
    end
    dNameCookie = CGI::Cookie.new('name' => "cmDisplayName", 'value' => displayName, 'path' => '/')
    profileCookie = CGI::Cookie.new('name' => "cmProfile", 'value' => JSON.generate(profile), 'path' => '/')
    c.out( 'cookie' => [dNameCookie, profileCookie] ) { '<script>window.opener.displayProfile('+JSON.generate(profile)+');window.close();</script>' }
  else
end

rescue Exception => e
  
  syslog.err("error: " + e.to_s.gsub('%', ''))
  now = DateTime.now
  c.out {
    c.html { "That's an error: #{e} (#{now})" }
  }
end
